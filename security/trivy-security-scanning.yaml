---
# Trivy Operator for Runtime Security Scanning
apiVersion: v1
kind: Namespace
metadata:
  name: trivy-system
  labels:
    name: trivy-system
    pod-security.kubernetes.io/enforce: restricted

---
# Trivy Operator Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: trivy-operator-config
  namespace: trivy-system
  labels:
    app.kubernetes.io/name: trivy-operator
data:
  # Scanning configuration
  trivy.timeout: "10m"
  trivy.severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
  trivy.ignoreUnfixed: "false"
  trivy.skipUpdate: "false"
  
  # Registry configuration for private images
  trivy.registry.mirror: ""
  trivy.registry.username: ""
  trivy.registry.password: ""
  
  # Database configuration
  trivy.dbRepository: "ghcr.io/aquasecurity/trivy-db"
  trivy.javaDbRepository: "ghcr.io/aquasecurity/trivy-java-db"
  
  # Report settings
  vulnerabilityReports.scanner: "Trivy"
  configAuditReports.scanner: "Trivy"
  exposedSecretReports.scanner: "Trivy"
  
  # Cluster compliance
  compliance.failEntriesLimit: "10"
  
  # Node collector
  nodeCollector.volumeMounts.hostRoot: "/host"
  nodeCollector.imageRef: "ghcr.io/aquasecurity/node-collector:0.0.8"

---
# Trivy Admission Controller
apiVersion: v1
kind: ConfigMap
metadata:
  name: trivy-admission-config
  namespace: trivy-system
data:
  admission.yaml: |
    # Admission controller configuration
    policy:
      # Block images with HIGH or CRITICAL vulnerabilities
      vulnerabilities:
        - severity: HIGH
          action: block
        - severity: CRITICAL
          action: block
      
      # Block images with secrets
      secrets:
        action: block
      
      # Allow images from trusted registries
      allowedRegistries:
        - "ghcr.io/mankinimbom/*"
        - "gcr.io/distroless/*"
        - "registry.k8s.io/*"
      
      # Namespace exemptions
      exemptNamespaces:
        - "kube-system"
        - "kube-public"
        - "trivy-system"
        - "velero"

---
# CronJob for Scheduled Security Scans
apiVersion: batch/v1
kind: CronJob
metadata:
  name: security-scan-scheduler
  namespace: trivy-system
  labels:
    component: security-scanner
spec:
  schedule: "0 4 * * *"  # Daily at 4 AM UTC
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: security-scanner
        spec:
          serviceAccountName: security-scanner
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            fsGroup: 65534
          containers:
          - name: trivy-scanner
            image: aquasecurity/trivy:0.48.0
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 65534
              capabilities:
                drop:
                - ALL
            command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Starting comprehensive security scan..."
              
              # Create report directory
              mkdir -p /tmp/reports
              
              # Scan all production images
              IMAGES=$(kubectl get pods -n prod -o jsonpath='{.items[*].spec.containers[*].image}' | tr ' ' '\n' | sort -u)
              
              for image in $IMAGES; do
                echo "Scanning image: $image"
                trivy image --format json --output /tmp/reports/$(echo $image | tr '/' '_' | tr ':' '_').json $image
              done
              
              # Scan file system vulnerabilities
              trivy fs --format json --output /tmp/reports/filesystem-scan.json /
              
              # Generate summary report
              trivy image --format table --output /tmp/reports/summary-report.txt $IMAGES
              
              # Check for critical vulnerabilities
              CRITICAL_COUNT=$(find /tmp/reports -name "*.json" -exec jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")' {} \; | wc -l)
              HIGH_COUNT=$(find /tmp/reports -name "*.json" -exec jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")' {} \; | wc -l)
              
              echo "Security scan completed:"
              echo "- Critical vulnerabilities: $CRITICAL_COUNT"
              echo "- High vulnerabilities: $HIGH_COUNT"
              
              # Send alerts if critical vulnerabilities found
              if [ $CRITICAL_COUNT -gt 0 ]; then
                echo "‚ö†Ô∏è CRITICAL vulnerabilities detected!"
                curl -X POST $WEBHOOK_URL \
                  -H 'Content-Type: application/json' \
                  -d "{\"text\":\"üö® CRITICAL: $CRITICAL_COUNT critical vulnerabilities found in production images\"}" || true
              fi
              
              # Upload reports to S3 (optional)
              if [ ! -z "$AWS_S3_BUCKET" ]; then
                aws s3 sync /tmp/reports s3://$AWS_S3_BUCKET/security-reports/$(date +%Y-%m-%d)/
              fi
            env:
            - name: WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: notification-webhook
                  key: url
                  optional: true
            - name: AWS_S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: security-config
                  key: s3-bucket
                  optional: true
            resources:
              requests:
                cpu: 500m
                memory: 1Gi
              limits:
                cpu: 1000m
                memory: 2Gi
            volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /.cache
          volumes:
          - name: tmp
            emptyDir:
              sizeLimit: 2Gi
          - name: cache
            emptyDir:
              sizeLimit: 1Gi

---
# Security Scanner Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-scanner
  namespace: trivy-system
  labels:
    component: security-scanner

---
# Security Scanner ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: security-scanner
  labels:
    component: security-scanner
rules:
- apiGroups: [""]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["get", "list"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list"]

---
# Security Scanner ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: security-scanner
  labels:
    component: security-scanner
subjects:
- kind: ServiceAccount
  name: security-scanner
  namespace: trivy-system
roleRef:
  kind: ClusterRole
  name: security-scanner
  apiGroup: rbac.authorization.k8s.io

---
# Network Policy for Trivy System
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: trivy-system-network-policy
  namespace: trivy-system
  labels:
    component: network-policy
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  # Allow HTTPS for downloading vulnerability databases
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow Kubernetes API access
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 443
  ingress:
  # Allow monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
