apiVersion: v1
kind: Secret
metadata:
  name: backend-secrets
  namespace: prod
  labels:
    app: backend
    tier: api
    component: secrets
  annotations:
    kubernetes.io/description: "Backend application secrets"
    # Reference to External Secrets Operator
    external-secrets.io/backend: "vault"
    external-secrets.io/key-name: "backend-prod-secrets"
type: Opaque
stringData:
  # Database Configuration - Should be managed by External Secrets
  DB_USER: "vault:secret/data/prod/backend#db_user"
  DB_PASS: "vault:secret/data/prod/backend#db_pass"
  DB_HOST: "database.prod.svc.cluster.local"
  DB_PORT: "5432"
  DB_NAME: "proddb"
  # JWT Configuration - Should be managed by External Secrets
  JWT_SECRET: "vault:secret/data/prod/backend#jwt_secret"
  # Redis Configuration
  REDIS_URL: "redis://redis.prod.svc.cluster.local:6379"
  # Application Configuration
  NODE_ENV: "production"
  LOG_LEVEL: "info"
---
# External Secrets Store Configuration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: prod
spec:
  provider:
    vault:
      server: "https://vault.company.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "backend-prod"
          serviceAccountRef:
            name: "backend-sa"
---
# External Secret to sync from Vault
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: backend-vault-secrets
  namespace: prod
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: backend-secrets
    creationPolicy: Owner
  data:
  - secretKey: DB_USER
    remoteRef:
      key: secret/data/prod/backend
      property: db_user
  - secretKey: DB_PASS
    remoteRef:
      key: secret/data/prod/backend
      property: db_pass
  - secretKey: JWT_SECRET
    remoteRef:
      key: secret/data/prod/backend
      property: jwt_secret
